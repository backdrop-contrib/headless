<?php
/**
 * @file
 * Headless allows you to use Backdrop CMS as an API.
 */

/**
 * Implements hook_menu().
 */
function headless_menu() {
  $items = array();
  // Return JSON for individual nodes.
  $items['api/node/%/%'] = array(
    'page callback' => 'headless_type',
    'access callback' => TRUE,
    'page arguments' => array(2, 3),
  );
  // Return JSON for individual terms.
  $items['api/%/term/%'] = array(
    'page callback' => 'headless_term_item',
    'access callback' => TRUE,
    'page arguments' => array(1, 3),
  );
  $items['api/views/%'] = array(
    'page callback' => 'headless_views',
    'access callback' => TRUE,
    'page arguments' => array(2),
  );
  $items['api/v2/views/%/%'] = array(
    'page callback' => 'headless_views_v2',
    'access callback' => TRUE,
    'page arguments' => array(3, 4),
  );
  if (module_exists('paragraphs')) {
    // Return json for individual paragraphs.
    $items['api/paragraphs/%/%'] = array(
      'page callback' => 'headless_paragraphs_item',
      'access callback' => TRUE,
      'page arguments' => array(2, 3),
    );
  }
  $items['admin/config/services/headless'] = array(
    'title' => 'Headless settings',
    'description' => 'Configure the entity types you wish to expose as json endpoints.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('headless_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/headless.admin.inc',
  );

  // Router: allow API queries via string paths.
  $items['api/router/%'] = array(
    'title' => 'Headless router',
    'description' => 'Allow queries via string like /api/my-node-title',
    'page callback' => 'headless_router',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'includes/headless.router.inc',
  );

  return $items;
}

/**
 * Page callback for node types.
 */
function headless_type($type, $nid) {
  $config = config_get('headless.settings', 'node');
  if ($config[$type] != 1) {
    $json_error = ['code' => 404];
    backdrop_json_output($json_error);
    backdrop_exit();
  }
  $my_json = node_load($nid);
  backdrop_json_output($my_json);
  backdrop_exit();
}

/**
 * Page callback for terms.
 */
function headless_term_item($vocab, $tid) {
  $config = config_get('headless.settings', 'vocabularies');
  if ($config[$vocab] != 1) {
    $json_error = ['code' => 404];
    backdrop_json_output($json_error);
    backdrop_exit();
  }
  $my_json = taxonomy_term_load($tid);
  backdrop_json_output($my_json);
  backdrop_exit();
}

/**
 * Page callback for views.
 *
 * This is to make it backwards compatible
 */
function headless_views($view) {
  $config = config_get('headless.settings', 'views');
  if ($config[$view] != 1) {
    $json_error = ['code' => 404];
    backdrop_json_output($json_error);
    backdrop_exit();
  }
  $results = views_get_view_result($view);
  $count = count($results);
  $my_json = [
    'results' => $results,
    'count' => $count,
  ];
  backdrop_json_output($my_json);
  backdrop_exit();
}

/**
 * Page callback for views v2.
 */
function headless_views_v2($view, $display_id) {

  $config = config_get('headless.settings', 'views');
  if ($config[$view] != 1) {
    $json_error = ['code' => 404];
    backdrop_json_output($json_error);
    backdrop_exit();
  }
  $return = _views_get_view_result($view, $display_id);

  $my_json = [
    'results' => $return['results'],
    'total_items' => $return['total_items'],
    'items_per_page' => $return['items_per_page'],
    'total_pages' => ceil($return['total_items'] / $return['items_per_page']),
    'current_page' => $return['current_page'],
  ];
  backdrop_json_output($my_json);
  backdrop_exit();
}

/**
 * Page callback for paragraph types.
 */
function headless_paragraphs_item($type, $entity_id) {
  $config = config_get('headless.settings', 'paragraphs');
  if ($config[$type] != 1) {
    $json_error = ['code' => 404];
    backdrop_json_output($json_error);
    backdrop_exit();
  }
  $result = paragraphs_item_load($entity_id);
  backdrop_json_output($result);
  backdrop_exit();
}

/**
 * Helper function to add pager data to /api/v2/views/%/% endpoints.
 *
 * We mimic the core function to add some extra pager data to the
 * returned value.
 */
function _views_get_view_result($name, $display_id = NULL) {
  $args = func_get_args();
  // Remove $name.
  array_shift($args);
  if (count($args)) {
    // Remove $display_id.
    array_shift($args);
  }

  $view = views_get_view($name);
  $return = array();
  if (is_object($view)) {
    if (is_array($args)) {
      $view->set_arguments($args);
    }
    if (is_string($display_id)) {
      $view->set_display($display_id);
    }
    else {
      $view->init_display();
    }
    $view->pre_execute();
    $view->execute();

    $total_items = $view->query->pager->total_items;
    $items_per_page = $view->query->pager->options['items_per_page'];
    $current_page = $view->query->pager->current_page;

    $return['total_items'] = $total_items;
    $return['items_per_page'] = $items_per_page;
    $return['current_page'] = $current_page;
    $return['results'] = $view->result;
    return $return;
  }
  else {
    return array();
  }
}
